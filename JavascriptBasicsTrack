

///Welcome to my 30 days of JavaScript exercises on LeetCode. I used this to review and get started on an easy path in Leetcode to get used to the process. 
//Looking forward to doing more challenging problems soon! 

/**
 * 1. @return {Function} that returns "Hello World"
 */
var createHelloWorld = function() {
    return function(...args) {
       return "Hello World"
    }
};

//2. Given an integer n, return a counter function. This counter function initially 
//returns n and then returns 1 more than the previous value every subsequent time
// it is called (n, n + 1, n + 2, etc).

var createCounter = function(n) {
    return function() {
        return n++
    };
};

//3. (2704) To Be Or Not to Be
//Write a function expect that helps developers test their code. It should take in any value val and return an object with the following two functions.

//toBe(val) accepts another value and returns true if the two values === each other. If they are not equal, it should throw an error "Not Equal".
//notToBe(val) accepts another value and returns true if the two values !== each other. If they are equal, it should throw an error "Equal".


/**
 * @param {string} val
 * @return {Object}
 */

var expect = function(val) {
    function toBe(n){
        if(val === n){
            return true
        } else {
            throw new Error("Not Equal")
        }
    }
    function notToBe(n){
        if(val !== n){
            return true
        } else {
            throw new Error("Equal")
        }
    }

    return {toBe,notToBe}

};

/**
 * expect(5).toBe(5); // true
 * expect(5).notToBe(5); // throws "Equal"
 */


//2665 (4.) Counter II 

//Write a function createCounter. It should accept an initial integer init. It should return an object with three functions.

//The three functions are:

//increment() increases the current value by 1 and then returns it.
//decrement() reduces the current value by 1 and then returns it.
//reset() sets the current value to init and then returns it.

var createCounter = function(init) {
    let count=init;
    return {increment(){
        return ++count;
    },
    decrement(){
        return --count;
    },
     reset(){
        count = init;
        return count;
    }
    }
};

//5. 2635. Apply Transform Over Each Element in Array

//Given an integer array arr and a mapping function fn, return a new array with a transformation applied to each element.

//The returned array should be created such that returnedArray[i] = fn(arr[i], i).

//Please solve it without the built-in Array.map method.


var map = function(arr, fn) {
    const notMap = [];
   for (let i = 0; i < arr.length; i++) {
    notMap.push(fn(arr[i], i));}
       return notMap;
   };

   
