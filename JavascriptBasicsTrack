

///Welcome to my 30 days of JavaScript exercises on LeetCode. I used this to review and get started on an easy path in Leetcode to get used to the process. 
//Looking forward to doing more challenging problems soon! 

/**
 * 1. @return {Function} that returns "Hello World"
 */
var createHelloWorld = function() {
    return function(...args) {
       return "Hello World"
    }
};

//2. Given an integer n, return a counter function. This counter function initially 
//returns n and then returns 1 more than the previous value every subsequent time
// it is called (n, n + 1, n + 2, etc).

var createCounter = function(n) {
    return function() {
        return n++
    };
};

//3. (2704) To Be Or Not to Be
//Write a function expect that helps developers test their code. It should take in any value val and return an object with the following two functions.

//toBe(val) accepts another value and returns true if the two values === each other. If they are not equal, it should throw an error "Not Equal".
//notToBe(val) accepts another value and returns true if the two values !== each other. If they are equal, it should throw an error "Equal".


/**
 * @param {string} val
 * @return {Object}
 */

var expect = function(val) {
    function toBe(n){
        if(val === n){
            return true
        } else {
            throw new Error("Not Equal")
        }
    }
    function notToBe(n){
        if(val !== n){
            return true
        } else {
            throw new Error("Equal")
        }
    }

    return {toBe,notToBe}

};

/**
 * expect(5).toBe(5); // true
 * expect(5).notToBe(5); // throws "Equal"
 */


//2665 (4.) Counter II 

//Write a function createCounter. It should accept an initial integer init. It should return an object with three functions.

//The three functions are:

//increment() increases the current value by 1 and then returns it.
//decrement() reduces the current value by 1 and then returns it.
//reset() sets the current value to init and then returns it.

var createCounter = function(init) {
    let count=init;
    return {increment(){
        return ++count;
    },
    decrement(){
        return --count;
    },
     reset(){
        count = init;
        return count;
    }
    }
};

//5. 2635. Apply Transform Over Each Element in Array

//Given an integer array arr and a mapping function fn, return a new array with a transformation applied to each element.

//The returned array should be created such that returnedArray[i] = fn(arr[i], i).

//Please solve it without the built-in Array.map method.


var map = function(arr, fn) {
    const notMap = [];
   for (let i = 0; i < arr.length; i++) {
    notMap.push(fn(arr[i], i));}
       return notMap;
   };


// 6. 2634. Filter Elements from Array

//Given an integer array arr and a filtering function fn, return a filtered array filteredArr.

//The fn function takes one or two arguments:

//arr[i] - number from the arr
//i - index of arr[i]
//filteredArr should only contain the elements from the arr for which the expression fn(arr[i], i) evaluates to a truthy value. A truthy value is a value where Boolean(value) returns true.

//Please solve it without the built-in Array.filter method.



var filter = function(arr, fn) {
    const newArr = [];
    for (let i = 0; i < arr.length; i++) {
        if  (fn(arr[i], i)) {
            newArr.push(arr[i]);
        } 
    }
        return newArr;  
};

// 2626. Array Reduce Transformation

//Given an integer array nums, a reducer function fn, and an initial value init, return a reduced array.

//A reduced array is created by applying the following operation: val = fn(init, nums[0]), val = fn(val, nums[1]), val = fn(val, nums[2]), ... until every element in the array has been processed. The final value of val is returned.

//If the length of the array is 0, it should return init.

//Please solve it without using the built-in Array.reduce method.

var reduce = function(nums, fn, init) {
    let val = init;

    if (nums.length === 0){
        return init;
    } else {
      for (let i = 0; i<nums.length; i++){
          val = fn(val,nums[i]);
      }
        return val;
    }
};


/* 2629. Function Composition

Given an array of functions [f1, f2, f3, ..., fn], return a new function fn that is the function composition of the array of functions.

The function composition of [f(x), g(x), h(x)] is fn(x) = f(g(h(x))).

The function composition of an empty list of functions is the identity function f(x) = x.

You may assume each function in the array accepts one integer as input and returns one integer as output.

*/  

var compose = function(functions) {
	return function(x) {
        let val = x;
        if (functions.length == 0){
            return x;
        } else {
           for (let i = functions.length - 1; i >= 0; i--) {
                val = functions[i](val);
            }}
        return val;
        };
    };


/* Notes: 
This one was a little funky! My first build solved the compounded functions left to right, which worked in 2/3 test cases.
It took me a minute to realize why it wasn't passing the first one. Switch the order to the end, now
we're solving last function to first instead of the opposite. All tests pass. 
*/

// 2703. Return Length of Arguments Passed

//Write a function argumentsLength that returns the count of arguments passed to it.

var argumentsLength = function(...args) {
    return args.length;
   };

//Notes:

//Well this one took less time to figure out than it took to type...


//2666. Allow One Function Call


/* Given a function fn, return a new function that is identical to the original function except that it ensures fn is called at most once.

The first time the returned function is called, it should return the same result as fn.
Every subsequent time it is called, it should return undefined.
*/


var once = function(fn) {
    var count = 0;
    return function(...args){
    if (count === 0) {
        count++;
        return fn(...args)
        }
        return undefined;
    };
};

//2623. Memoize

/* Given a function fn, return a memoized version of that function.

A memoized function is a function that will never be called twice with the same inputs. Instead it will return a cached value.

You can assume there are 3 possible input functions: sum, fib, and factorial.

sum accepts two integers a and b and returns a + b.
fib accepts a single integer n and returns 1 if n <= 1 or fib(n - 1) + fib(n - 2) otherwise.
factorial accepts a single integer n and returns 1 if n <= 1 or factorial(n - 1) * n otherwise.
*/

function memoize(fn) {
    const cache = {};
    let callCount = 0;
    return function(...args) {
        const key = JSON.stringify(args);
        if (key in cache){
            return cache[key];
        }
            cache[key] = fn(...args);
            return cache[key];
        }
}

//Notes:

//got some help from neetCodeIO on this one, as what I was doing was not working. Happy to start working some JSON in there.



//2723. Add Two Promises

//Given two promises promise1 and promise2, return a new promise. promise1 and promise2 will both resolve with a number. The returned promise should resolve with the sum of the two numbers.
 
var addTwoPromises = async function(promise1, promise2) {
    const p1 = await promise1;
    const p2 = await promise2;
  
  return p1 + p2;

};

//ah yes, promises, promises!! Straightforward.... if you remember how they work. Which I do ... most days.



//2621. Sleep

//Given a positive integer millis, write an asynchronous function that sleeps for millis milliseconds. It can resolve any value.

let t = Date.now()
  sleep(100).then(() => console.log(Date.now() - t)) 

async function sleep(millis) {
    await new Promise(resolve => setTimeout(resolve, millis));
}

/* Notes:
 It's wild how not exactly precise setTimeout is in this case (sometimes expected output is exactly, sometimes it's plus one.) 
I would also note that without the first part, the second part works but is consistently 1ms more. Both were accepted, as this is apparently within tolerance of the testing
In the future I'll be reading up more on this imprecision because I find it curious. 
*/



//2715. Execute Cancellable Function With Delay

//Given a function fn, an array or arguments args, and a timeout t in milliseconds, return a cancel function cancelFn.

//After a delay of t, fn should be called with args passed as parameters unless cancelFn was called first. In that case, fn should never be called.

var cancellable = function(fn, args, t) {
    let cancelled = false;
    
    const cancelFn = () => {
        cancelled = true;
    };
    
    setTimeout(() => {
        if (!cancelled) {
          fn(...args);
        }
      }, t);
    
      return cancelFn;
    };


//Alternative version, without arrow function:

    var cancellable = function(fn, args, t) {
        let cancelled = false;
      
        function cancelFn() {
          if (!cancelled) {
            cancelled = true;
            return true; 
          }
          return false; 
        }
      
        setTimeout(function() {
          if (!cancelled) {
            fn.apply(null, args);
          }
        }, t);
      
        return cancelFn;
      };

      